/*
 *Jared Migneco
 *Project 3 Slave class
 *uses semaphore code from

https://www.prodevelopertutorial.com/system-v-semaphores-in-c-using-semget-semctl-semop-system-v-system-calls-in-linux/#:~:text=A%20semaphore%20can%20be%20destroyed%20by%20calling%20semctl,us%20see%20an%20example%20for%20System%20V%20semaphore.https://www.prodevelopertutorial.com/system-v-semaphores-in-c-using-semget-semctl-semop-system-v-system-calls-in-linux/#:~:text=A%20semaphore%20can%20be%20destroyed%20by%20calling%20semctl,us%20see%20an%20example%20for%20System%20V%20semaphore.

 *03/17/2022
 */
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <sys/sem.h>

//code mentioned as necessary on project page
union semun
{
            int val;                /* value for SETVAL */
            struct semid_ds *buf;   /* buffer for IPC_STAT & IPC_SET */
            unsigned short *array;  /* array for GETALL & SETALL */
            struct seminfo *__buf;  /* buffer for IPC_INFO */
};

//semaphore code used from provided demo
int main (const int argc, char** argv)
{
        int shmid, i;
        //semaphore variables
        key_t key;
        int semid;
        union semun arg;
        struct sembuf sb = {0, -1, 0};

        if ((key = ftok("slave.c", 'J')) == -1)
        {
                perror("ftok");
                exit(1);
        }

        //takes in arg
        int xx  = atoi(argv[1]);
        if (xx !> 0)
        {
                printf("Slave: Error: given value is not an integer higher than 0");
                exit(EXIT_FAILURE);
        }

        //matching the shared mem ID to be the same as in the master class
        shmid = shmget(0x080698, sizeof(int), 0666 | IPC_CREAT);
        int *shm = (int*)shmat(shmid, NULL, 0);

        //checks if shared memory is set to 0
        if (*shm == 0)
        {
                printf("Slave: shared memory is set to 0");
        }
        else
        {
                //worker class has an error and exits if shared memory is not 0
                printf("Slave: ERROR: shared memory not set to 0");
                exit(EXIT_FAILURE);
        }

        //unfinished so left at 0 so program can compile
        *shm = 0;

        FILE *fp;
        fp = fopen ("logfile.%d", xx, "w");

        //code for handling critical section, uses semaphore to handle CR
        for (i = 0; i <5; i++)
        {
                //grabbling semaphore
                if ((semid = semget(key, 1, 0)) == -1)
                {
                        perror("semget");
                        exit(1);
                }
                //sleeping for random amount of time
                sleep(rand() % 5);
                //printing current system time
                printf("Slave: task completed at: %s", "$(date = '%r')");
                sleep(rand() % 5);
                //releasing semaphore
                if (semctl(semid, 0, IPC_RMID, arg) == -1)
                {
                        perror("semctl");
                        exit(1);
                }
        }
        //waits for shared memory to reach 0
        while(*shm != 0)
        {
                sleep(1);
        }
        printf("Worker: Shared memory reset to 0");

        return(EXIT_FAILURE);
} 
